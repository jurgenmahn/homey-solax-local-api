import { ResponseDecoder } from './ResponseParser';

// Helper functions

const div10 = (value: number) => value / 10;
const div100 = (value: number) => value / 100;
const packU16 = (low: number, high: number) => (value: number[]) => (value[high] << 8) | value[low];
const toSigned = (value: number) => value > 32767 ? value - 65536 : value;
const toSigned32 = (value: number) => value > 2147483647 ? value - 4294967296 : value;
const twowayDiv10 = (value: number) => toSigned(value) / 10;
const twowayDiv100 = (value: number) => toSigned(value) / 100;

const decodeRunMode = (value: number): string => {
  const runMode = Math.floor(value);
  const modes = {
    0: "Waiting",
    1: "Checking",
    2: "Normal",
    3: "Fault",
    4: "Permanent Fault",
    5: "Updating",
    6: "EPS Check",
    7: "EPS Mode",
    8: "Self Test",
    9: "Idle",
    10: "Standby",
  };
  return modes[runMode as keyof typeof modes] || "Unknown";
};

const decodeBatteryMode = (value: number): string => {
  const batteryMode = Math.floor(value);
  const modes = {
    0: "Self Use Mode",
    1: "Force Time Use",
    2: "Back Up Mode",
    3: "Feed-in Priority",
  };
  return modes[batteryMode as keyof typeof modes] || "Unknown";
};

// Enum for units
enum Units {
  V = 'V',
  A = 'A',
  W = 'W',
  KWH = 'kWh',
  C = 'Â°C',
  PERCENT = '%',
  HZ = 'Hz',
  NONE = '',
}

// Base schema for all inverters
const baseSchema = {
  type: 'object',
  properties: {
    type: { type: 'number' },
    sn: { type: 'string' },
    ver: { type: 'string' },
    data: {
      type: 'array',
      items: { type: 'number' },
    },
  },
  required: ['type', 'sn', 'ver', 'data'],
};

export const INVERTER_MODELS = {
  X1: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        data: {
          type: 'array',
          items: { type: 'number' },
          minItems: 107, // Using the largest minimum length from the Python schema
        },
      },
    },
    decoder: {
      'pv1_current': [0, Units.A, div10],
      'pv2_current': [1, Units.A, div10],
      'pv1_voltage': [2, Units.V, div10],
      'pv2_voltage': [3, Units.V, div10],
      'output_current': [4, Units.A, div10],
      'network_voltage': [5, Units.V, div10],
      'ac_power': [6, Units.W],
      'inverter_temperature': [7, Units.C, div10],
      'today_energy': [8, Units.KWH, div10],
      'total_energy': [9, Units.KWH, div10],
      'exported_power': [10, Units.W],
      'pv1_power': [11, Units.W],
      'pv2_power': [12, Units.W],
      'battery_voltage': [13, Units.V, div100],
      'battery_current': [14, Units.A, div10],
      'battery_power': [15, Units.W],
      'battery_temperature': [16, Units.C, div10],
      'battery_capacity': [21, Units.PERCENT],
      'total_feed_in_energy': [41, Units.KWH, div10],
      'total_consumption': [42, Units.KWH, div10],
      'power_now': [43, Units.W],
      'grid_frequency': [50, Units.HZ, div100],
      'eps_voltage': [53, Units.V, div10],
      'eps_current': [54, Units.A, div10],
      'eps_power': [55, Units.W],
      'eps_frequency': [56, Units.HZ, div100],
    } as ResponseDecoder,
  },
  X1Boost: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        type: { type: 'number', enum: [4] },
        data: {
          type: 'array',
          items: { type: 'number' },
          minItems: 200,
          maxItems: 200,
        },
        information: {
          type: 'array',
          minItems: 10,
          maxItems: 10,
        },
      },
    },
    decoder: {
      'ac_voltage': [0, Units.V, div10],
      'ac_output_current': [1, Units.A, div10],
      'ac_output_power': [2, Units.W],
      'pv1_voltage': [3, Units.V, div10],
      'pv2_voltage': [4, Units.V, div10],
      'pv1_current': [5, Units.A, div10],
      'pv2_current': [6, Units.A, div10],
      'pv1_power': [7, Units.W],
      'pv2_power': [8, Units.W],
      'ac_frequency': [9, Units.HZ, div100],
      'total_generated_energy': [packU16(11, 12), Units.KWH, div10],
      'today_generated_energy': [13, Units.KWH, div10],
      'inverter_temperature': [39, Units.C],
      'exported_power': [48, Units.W, toSigned],
      'total_export_energy': [packU16(50, 51), Units.KWH, div100],
      'total_import_energy': [packU16(52, 53), Units.KWH, div100],
    } as ResponseDecoder,
  },
  X1HybridGen4: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        type: { type: 'number', enum: [15] },
        data: {
          type: 'array',
          items: { type: 'number' },
          minItems: 200,
          maxItems: 200,
        },
        information: {
          type: 'array',
          minItems: 9,
          maxItems: 10,
        },
      },
    },
    decoder: {
      'ac_voltage_r': [0, Units.V, div10],
      'ac_current': [1, Units.A, div10],
      'ac_power': [2, Units.W, toSigned],
      'grid_frequency': [3, Units.HZ, div100],
      'pv1_voltage': [4, Units.V, div10],
      'pv2_voltage': [5, Units.V, div10],
      'pv1_current': [6, Units.A, div10],
      'pv2_current': [7, Units.A, div10],
      'pv1_power': [8, Units.W],
      'pv2_power': [9, Units.W],
      'on_grid_total_yield': [packU16(11, 12), Units.KWH, div10],
      'on_grid_daily_yield': [13, Units.KWH, div10],
      'battery_voltage': [14, Units.V, div100],
      'battery_current': [15, Units.A, div100],
      'battery_power': [16, Units.W],
      'battery_temperature': [17, Units.C],
      'battery_soc': [18, Units.PERCENT],
      'inverter_temperature': [26, Units.C],
      'grid_power': [32, Units.W, toSigned],
      'total_feed_in_energy': [packU16(34, 35), Units.KWH, div100],
      'total_consumption': [packU16(36, 37), Units.KWH, div100],
    } as ResponseDecoder,
  },
  X1Mini: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        type: {
          type: 'string',
          pattern: '^X1-'
        },
        data: {
          type: 'array',
          items: { type: 'number' },
          minItems: 69,
          maxItems: 69,
        },
        information: {
          type: 'array',
          minItems: 9,
          maxItems: 9,
        },
      },
    },
    decoder: {
      'pv1_current': [0, Units.A],
      'pv2_current': [1, Units.A],
      'pv1_voltage': [2, Units.V],
      'pv2_voltage': [3, Units.V],
      'output_current': [4, Units.A],
      'network_voltage': [5, Units.V],
      'ac_power': [6, Units.W],
      'inverter_temperature': [7, Units.C],
      'today_energy': [8, Units.KWH],
      'total_energy': [9, Units.KWH],
      'exported_power': [10, Units.W],
      'pv1_power': [11, Units.W],
      'pv2_power': [12, Units.W],
      'total_feed_in_energy': [41, Units.KWH],
      'total_consumption': [42, Units.KWH],
      'power_now': [43, Units.W],
      'grid_frequency': [50, Units.HZ],
    } as ResponseDecoder,
  },
  X1MiniV34: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        type: { type: 'number', enum: [4] },
        data: {
          type: 'array',
          items: { type: 'number' },
          oneOf: [
            { minItems: 69, maxItems: 69 },
            { minItems: 100, maxItems: 100 },
            { minItems: 200, maxItems: 200 },
          ],
        },
        information: {
          type: 'array',
          oneOf: [
            { minItems: 9, maxItems: 9 },
            { minItems: 10, maxItems: 10 },
          ],
        },
      },
    },
    decoder: {
      'network_voltage': [0, Units.V, div10],
      'output_current': [1, Units.A, div10],
      'ac_power': [2, Units.W],
      'pv1_voltage': [3, Units.V, div10],
      'pv2_voltage': [4, Units.V, div10],
      'pv1_current': [5, Units.A, div10],
      'pv2_current': [6, Units.A, div10],
      'pv1_power': [7, Units.W],
      'pv2_power': [8, Units.W],
      'grid_frequency': [9, Units.HZ, div100],
      'total_energy': [11, Units.KWH, div10],
      'today_energy': [13, Units.KWH, div10],
      'total_feed_in_energy': [41, Units.KWH, div10],
      'total_consumption': [42, Units.KWH, div10],
      'power_now': [43, Units.W, div10],
      'inverter_temperature': [55, Units.C],
    } as ResponseDecoder,
  },
  X1Smart: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        type: { type: 'number', enum: [8] },
        data: {
          type: 'array',
          items: { type: 'number' },
          minItems: 200,
          maxItems: 200,
        },
        information: {
          type: 'array',
          minItems: 8,
          maxItems: 8,
        },
      },
    },
    decoder: {
      'network_voltage': [0, Units.V, div10],
      'output_current': [1, Units.A, div10],
      'ac_power': [2, Units.W],
      'pv1_voltage': [3, Units.V, div10],
      'pv2_voltage': [4, Units.V, div10],
      'pv1_current': [5, Units.A, div10],
      'pv2_current': [6, Units.A, div10],
      'pv1_power': [7, Units.W],
      'pv2_power': [8, Units.W],
      'grid_frequency': [9, Units.HZ, div100],
      'total_energy': [11, Units.KWH, div10],
      'today_energy': [13, Units.KWH, div10],
      'inverter_temperature': [39, Units.C],
      'exported_power': [48, Units.W, toSigned],
      'total_feed_in_energy': [50, Units.KWH, div100],
      'total_consumption': [52, Units.KWH, div100],
    } as ResponseDecoder,
  },
  X3: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        type: {
          type: 'string',
          pattern: '^X3-'
        },
        data: {
          type: 'array',
          items: { type: 'number' },
          oneOf: [
            { minItems: 102, maxItems: 103 },
            { minItems: 107, maxItems: 107 },
          ],
        },
        information: {
          type: 'array',
          minItems: 9,
          maxItems: 9,
        },
      },
    },
    decoder: {
      'pv1_current': [0, Units.A],
      'pv2_current': [1, Units.A],
      'pv1_voltage': [2, Units.V],
      'pv2_voltage': [3, Units.V],
      'output_current_phase_1': [4, Units.A],
      'network_voltage_phase_1': [5, Units.V],
      'ac_power': [6, Units.W],
      'inverter_temperature': [7, Units.C],
      'today_energy': [8, Units.KWH],
      'total_energy': [9, Units.KWH],
      'exported_power': [10, Units.W],
      'pv1_power': [11, Units.W],
      'pv2_power': [12, Units.W],
      'battery_voltage': [13, Units.V],
      'battery_current': [14, Units.A],
      'battery_power': [15, Units.W],
      'battery_temperature': [16, Units.C],
      'battery_remaining_capacity': [21, Units.PERCENT],
      'total_feed_in_energy': [41, Units.KWH],
      'total_consumption': [42, Units.KWH],
      'power_now_phase_1': [43, Units.W],
      'power_now_phase_2': [44, Units.W],
      'power_now_phase_3': [45, Units.W],
      'output_current_phase_2': [46, Units.A],
      'output_current_phase_3': [47, Units.A],
      'network_voltage_phase_2': [48, Units.V],
      'network_voltage_phase_3': [49, Units.V],
      'grid_frequency_phase_1': [50, Units.HZ],
      'grid_frequency_phase_2': [51, Units.HZ],
      'grid_frequency_phase_3': [52, Units.HZ],
      'eps_voltage': [53, Units.V],
      'eps_current': [54, Units.A],
      'eps_power': [55, Units.W],
      'eps_frequency': [56, Units.HZ],
    } as ResponseDecoder,
  },
  X3HybridG4: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        type: { type: 'number', enum: [14] },
        data: {
          type: 'array',
          items: { type: 'number' },
          minItems: 300,
          maxItems: 300,
        },
        information: {
          type: 'array',
          minItems: 10,
          maxItems: 10,
        },
      },
    },
    decoder: {
      'grid_1_voltage': [0, Units.V, div10],
      'grid_2_voltage': [1, Units.V, div10],
      'grid_3_voltage': [2, Units.V, div10],
      'grid_1_current': [3, Units.A, twowayDiv10],
      'grid_2_current': [4, Units.A, twowayDiv10],
      'grid_3_current': [5, Units.A, twowayDiv10],
      'grid_1_power': [6, Units.W, toSigned],
      'grid_2_power': [7, Units.W, toSigned],
      'grid_3_power': [8, Units.W, toSigned],
      'pv1_voltage': [10, Units.V, div10],
      'pv2_voltage': [11, Units.V, div10],
      'pv1_current': [12, Units.A, div10],
      'pv2_current': [13, Units.A, div10],
      'pv1_power': [14, Units.W],
      'pv2_power': [15, Units.W],
      'grid_1_frequency': [16, Units.HZ, div100],
      'grid_2_frequency': [17, Units.HZ, div100],
      'grid_3_frequency': [18, Units.HZ, div100],
      'run_mode_text': [19, Units.NONE, decodeRunMode],
      'eps_1_voltage': [23, Units.V, div10],
      'eps_2_voltage': [24, Units.V, div10],
      'eps_3_voltage': [25, Units.V, div10],
      'eps_1_current': [26, Units.A, twowayDiv10],
      'eps_2_current': [27, Units.A, twowayDiv10],
      'eps_3_current': [28, Units.A, twowayDiv10],
      'eps_1_power': [29, Units.W, toSigned],
      'eps_2_power': [30, Units.W, toSigned],
      'eps_3_power': [31, Units.W, toSigned],
      'grid_power': [packU16(34, 35), Units.W, toSigned32],
      'battery_current': [40, Units.A, twowayDiv100],
      'battery_power': [41, Units.W, toSigned],
      'load_generator_power': [47, Units.W, toSigned],
      'radiator_temperature': [54, Units.C, toSigned],
      'yield_total': [packU16(68, 69), Units.KWH, div10],
      'yield_today': [70, Units.KWH, div10],
      'battery_discharge_energy_total': [packU16(74, 75), Units.KWH, div10],
      'battery_charge_energy_total': [packU16(76, 77), Units.KWH, div10],
      'battery_discharge_energy_today': [78, Units.KWH, div10],
      'battery_charge_energy_today': [79, Units.KWH, div10],
      'pv_energy_total': [packU16(80, 81), Units.KWH, div10],
      'eps_energy_total': [packU16(83, 84), Units.KWH, div10],
      'eps_energy_today': [85, Units.KWH, div10],
      'feed_in_energy': [packU16(86, 87), Units.KWH, div100],
      'consumed_energy': [packU16(88, 89), Units.KWH, div100],
      'feed_in_energy_total': [packU16(90, 91), Units.KWH, div100],
      'consumed_energy_total': [packU16(92, 93), Units.KWH, div100],
      'battery_remaining_capacity': [103, Units.PERCENT],
      'battery_temperature': [105, Units.C, toSigned],
      'battery_remaining_energy': [106, Units.KWH, true, div10],
      'battery_mode': [168, Units.NONE],
      'battery_mode_text': [168, Units.NONE, decodeBatteryMode],
      'battery_voltage': [packU16(169, 170), Units.V, div100],
    } as ResponseDecoder,
  },
  X3MicProG2: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        type: { type: 'number', enum: [16] },
        data: {
          type: 'array',
          items: { type: 'number' },
          minItems: 100,
          maxItems: 100,
        },
        information: {
          type: 'array',
          minItems: 10,
          maxItems: 10,
        },
      },
    },
    decoder: {
      'grid_1_voltage': [0, Units.V, div10],
      'grid_2_voltage': [1, Units.V, div10],
      'grid_3_voltage': [2, Units.V, div10],
      'grid_1_current': [3, Units.A, twowayDiv10],
      'grid_2_current': [4, Units.A, twowayDiv10],
      'grid_3_current': [5, Units.A, twowayDiv10],
      'grid_1_power': [6, Units.W, toSigned],
      'grid_2_power': [7, Units.W, toSigned],
      'grid_3_power': [8, Units.W, toSigned],
      'pv1_voltage': [9, Units.V, div10],
      'pv2_voltage': [10, Units.V, div10],
      'pv3_voltage': [11, Units.V, div10],
      'pv1_current': [12, Units.A, div10],
      'pv2_current': [13, Units.A, div10],
      'pv3_current': [14, Units.A, div10],
      'pv1_power': [15, Units.W],
      'pv2_power': [16, Units.W],
      'pv3_power': [17, Units.W],
      'grid_1_frequency': [18, Units.HZ, div100],
      'grid_2_frequency': [19, Units.HZ, div100],
      'grid_3_frequency': [20, Units.HZ, div100],
      'run_mode': [21, Units.NONE, decodeRunMode],
      'total_yield': [packU16(22, 23), Units.KWH, div10],
      'daily_yield': [24, Units.KWH, div10],
      'feed_in_power': [packU16(72, 73), Units.W, toSigned32],
      'total_feed_in_energy': [packU16(74, 75), Units.KWH, div100],
      'total_consumption': [packU16(76, 77), Units.KWH, div100],
    } as ResponseDecoder,
    getInverterSerialNumber: (response: { information?: any[] }): string | undefined => {
      return response.information?.[2];
    },    
  },
  X3Ultra: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        type: { type: 'number', enum: [25] },
        data: {
          type: 'array',
          items: { type: 'number' },
          minItems: 300,
          maxItems: 300,
        },
        information: {
          type: 'array',
          minItems: 10,
          maxItems: 10,
        },
      },
    },
    decoder: {
      'grid_1_voltage': [0, Units.V, div10],
      'grid_2_voltage': [1, Units.V, div10],
      'grid_3_voltage': [2, Units.V, div10],
      'grid_1_current': [3, Units.A, twowayDiv10],
      'grid_2_current': [4, Units.A, twowayDiv10],
      'grid_3_current': [5, Units.A, twowayDiv10],
      'grid_1_power': [6, Units.W, toSigned],
      'grid_2_power': [7, Units.W, toSigned],
      'grid_3_power': [8, Units.W, toSigned],
      'pv1_voltage': [10, Units.V, div10],
      'pv2_voltage': [11, Units.V, div10],
      'pv3_voltage': [129, Units.V, div10],
      'pv1_current': [12, Units.A, div10],
      'pv2_current': [13, Units.A, div10],
      'pv3_current': [130, Units.A, div10],
      'pv1_power': [14, Units.W],
      'pv2_power': [15, Units.W],
      'pv3_power': [131, Units.W],
      'grid_1_frequency': [16, Units.HZ, div100],
      'grid_2_frequency': [17, Units.HZ, div100],
      'grid_3_frequency': [18, Units.HZ, div100],
      'run_mode_text': [19, Units.NONE, decodeRunMode],
      'eps_1_voltage': [23, Units.V, div10],
      'eps_2_voltage': [24, Units.V, div10],
      'eps_3_voltage': [25, Units.V, div10],
      'eps_1_current': [26, Units.A, twowayDiv10],
      'eps_2_current': [27, Units.A, twowayDiv10],
      'eps_3_current': [28, Units.A, twowayDiv10],
      'eps_1_power': [29, Units.W, toSigned],
      'eps_2_power': [30, Units.W, toSigned],
      'eps_3_power': [31, Units.W, toSigned],
      'grid_power': [packU16(34, 35), Units.W, toSigned32],
      'battery_1_voltage': [39, Units.V, div10],
      'battery_2_voltage': [132, Units.V, div10],
      'battery_1_current': [40, Units.A, twowayDiv100],
      'battery_2_current': [133, Units.A, twowayDiv100],
      'battery_1_power': [41, Units.W, toSigned],
      'battery_2_power': [134, Units.W, toSigned],
      'battery_1_remaining_capacity': [103, Units.PERCENT],
      'battery_2_remaining_capacity': [140, Units.PERCENT],
      'battery_1_temperature': [105, Units.C, toSigned],
      'battery_2_temperature': [142, Units.C, toSigned],
      'load_generator_power': [47, Units.W, toSigned],
      'radiator_temperature': [54, Units.C, toSigned],
      'yield_total': [packU16(58, 59), Units.KWH, div10],
      'yield_today': [70, Units.KWH, div10],
      'battery_discharge_energy_total': [packU16(74, 75), Units.KWH, div10],
      'battery_charge_energy_total': [packU16(76, 77), Units.KWH, div10],
      'battery_discharge_energy_today': [78, Units.KWH, div10],
      'battery_charge_energy_today': [79, Units.KWH, div10],
      'pv_energy_total': [packU16(80, 81), Units.KWH, div10],
      'eps_energy_total': [packU16(83, 84), Units.KWH, div10],
      'eps_energy_today': [85, Units.KWH, div10],
      'feed_in_energy_total': [packU16(86, 87), Units.KWH, div100],
      'grid_consumed_energy_total': [packU16(88, 89), Units.KWH, div100],
      'feed_in_energy_today': [packU16(90, 91), Units.KWH, div100],
      'grid_consumed_energy_today': [packU16(92, 93), Units.KWH, div100],
      'battery_remaining_capacity': [158, Units.PERCENT],
      'battery_remaining_energy': [106, Units.KWH, div10],
      'inverter_power': [159, Units.W, div10],
    } as ResponseDecoder,
    getInverterSerialNumber: (response: { information?: any[] }): string | undefined => {
      return response.information?.[2];
    },
  },
  X3V34: {
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        type: { type: 'number', enum: [5] },
        data: {
          type: 'array',
          items: { type: 'number' },
          minItems: 200,
          maxItems: 200,
        },
        information: {
          type: 'array',
          minItems: 10,
          maxItems: 10,
        },
      },
    },
    decoder: {
      'network_voltage_phase_1': [0, Units.V, div10],
      'network_voltage_phase_2': [1, Units.V, div10],
      'network_voltage_phase_3': [2, Units.V, div10],
      'output_current_phase_1': [3, Units.A, twowayDiv10],
      'output_current_phase_2': [4, Units.A, twowayDiv10],
      'output_current_phase_3': [5, Units.A, twowayDiv10],
      'power_now_phase_1': [6, Units.W, toSigned],
      'power_now_phase_2': [7, Units.W, toSigned],
      'power_now_phase_3': [8, Units.W, toSigned],
      'pv1_voltage': [9, Units.V, div10],
      'pv2_voltage': [10, Units.V, div10],
      'pv1_current': [11, Units.A, div10],
      'pv2_current': [12, Units.A, div10],
      'pv1_power': [13, Units.W],
      'pv2_power': [14, Units.W],
      'total_pv_energy': [packU16(89, 90), Units.KWH, div10],
      'today_pv_energy': [112, Units.KWH, div10],
      'grid_frequency_phase_1': [15, Units.HZ, div100],
      'grid_frequency_phase_2': [16, Units.HZ, div100],
      'grid_frequency_phase_3': [17, Units.HZ, div100],
      'total_energy': [packU16(19, 20), Units.KWH, div10],
      'today_energy': [21, Units.KWH, div10],
      'battery_voltage': [24, Units.V, div100],
      'battery_current': [25, Units.A, twowayDiv100],
      'battery_power': [26, Units.W, toSigned],
      'battery_temperature': [27, Units.C],
      'battery_remaining_capacity': [28, Units.PERCENT],
      'total_battery_discharge_energy': [packU16(30, 31), Units.KWH, div10],
      'today_battery_discharge_energy': [113, Units.KWH, div10],
      'battery_remaining_energy': [32, Units.KWH, div10],
      'total_battery_charge_energy': [packU16(87, 88), Units.KWH, div10],
      'today_battery_charge_energy': [114, Units.KWH, div10],
      'exported_power': [65, Units.W, toSigned],
      'total_feed_in_energy': [packU16(67, 68), Units.KWH, div100],
      'total_consumption': [packU16(69, 70), Units.KWH, div100],
      'ac_power': [181, Units.W, toSigned],
      'eps_frequency': [63, Units.HZ, div100],
      'eps_total_energy': [packU16(110, 111), Units.KWH, div10],
    } as ResponseDecoder,
  },
  XHybrid: {
    api: {
      url: "http://${host}:${port}/api/realTimeData.htm"
    },
    schema: {
      ...baseSchema,
      properties: {
        ...baseSchema.properties,
        method: { type: 'string' },
        version: { type: 'string' },
        type: { type: 'string' },
        sn: { type: 'string' },
        data: {
          type: 'array',
          items: { type: 'number' },
          oneOf: [
            { minItems: 58, maxItems: 58 },
            { minItems: 68, maxItems: 68 },
          ],
        },
        status: {
          type: 'number',
          minimum: 0
        },
      },
    },
    decoder: {
      'pv1_current': [0, Units.A],
      'pv2_current': [1, Units.A],
      'pv1_voltage': [2, Units.V],
      'pv2_voltage': [3, Units.V],
      'output_current': [4, Units.A],
      'network_voltage': [5, Units.V],
      'power_now': [6, Units.W],
      'inverter_temperature': [7, Units.C],
      'today_energy': [8, Units.KWH],
      'total_energy': [9, Units.KWH],
      'exported_power': [10, Units.W],
      'pv1_power': [11, Units.W],
      'pv2_power': [12, Units.W],
      'battery_voltage': [13, Units.V],
      'battery_current': [14, Units.A],
      'battery_power': [15, Units.W],
      'battery_temperature': [16, Units.C],
      'battery_remaining_capacity': [17, Units.PERCENT],
      'month_energy': [19, Units.KWH],
      'grid_exported_energy': [41, Units.KWH],
      'grid_imported_energy': [42, Units.KWH],
      'grid_frequency': [50, Units.HZ],
      'eps_voltage': [53, Units.V],
      'eps_current': [54, Units.A],
      'eps_power': [55, Units.W],
      'eps_frequency': [56, Units.HZ],
    } as ResponseDecoder,
  }
};

export type InverterModel = keyof typeof INVERTER_MODELS;      